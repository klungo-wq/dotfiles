#+TITLE: Klungos Emacs Configurations
#+AUTHOR: Klungo

* Package Management

#+BEGIN_SRC emacs-lisp

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

#+END_SRC

* Use Package

#+begin_src emacs-lisp

(use-package use-package
:custom
(use-package-always-ensure t)
(package-native-compile t))

#+end_src

* Which Key

#+begin_src emacs-lisp

(use-package which-key
:config
(which-key-mode)
(setq which-key-idle-delay 0.5))

#+end_src

* Byte Compile Setup

#+begin_src emacs-lisp

(setq load-path (cons "~/.emacs.d/dotemacs/" load-path))

#+end_src

* Theming

** Modeline

#+begin_src emacs-lisp

(use-package doom-modeline
:init (doom-modeline-mode 1)
:custom 
(doom-modeline-height 50))

#+end_src

** Theme

#+begin_src emacs-lisp

(use-package doom-themes
:config 
(setq doom-themes-enable-bold t
doom-themes-enable-italic t))

#+end_src

#+BEGIN_SRC emacs-lisp

(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-theme 'doom-gruvbox t)

#+END_SRC

** Fonts

#+begin_src emacs-lisp

(set-frame-font "UbuntuMono-21" nil t)

#+end_src

* Text Modes and Org Mode

** Sensible Line Breaking

#+begin_src emacs-lisp

(add-hook 'text-mode-hook 'visual-line-mode)

#+end_src

** Overwrite Selected Text

#+begin_src emacs-lisp

(delete-selection-mode t)

#+end_src

** Initial Major Mode

#+begin_src emacs-lisp

(setq-default initial-major-mode 'org-mode
initial-scratch-message "#+title: Scratch Buffer\n\n")

#+end_src

** Org Tempo

#+BEGIN_SRC emacs-lisp

(require 'org-tempo)

#+END_SRC

** Org Bullets

(use-package org-bullets
:hook (org-mode . org-bullets-mode))
:config
(setq org-bullets-bullet-list '("◉" "○" "►" "•" "✸" "✿"))

** Org Modern

#+begin_src emacs-lisp

(use-package org-modern
:hook
(org-mode . global-org-modern-mode)
:custom
(org-modern-keyword nil)
(org-modern-checkbox nil)
(org-modern-table nil))

#+end_src

** Org Settings

(require 'org-indent)
(setq org-startup-indented t)
(add-hook 'org-mode-hook 'visual-line-mode)

** Org Settings 2.0

#+begin_src emacs-lisp

(setq org-startup-indented t
org-pretty-entities t
org-hide-emphasis-markers t
org-startup-with-inline-images t
org-image-actual-width '(300))

#+end_src

** Org Emphasis Markers

#+begin_src emacs-lisp

(use-package org-appear
:hook (org-mode . org-appear-mode))

#+end_src

** Eletric Indent Mode

#+begin_src emacs-lisp

(electric-indent-mode -1)

#+end_src

** Increase Line Spacing

#+begin_src emacs-lisp

(setq-default line-spacing 2)

#+end_src

* Quality of life changes

** Rainbow Mode

#+begin_src emacs-lisp

(use-package rainbow-mode
:hook (emacs-lisp-mode text-mode lisp-mode))

#+end_src

** Graphical Changes

#+begin_src emacs-lisp

(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(setq inhibit-startup-screen t)
;;(setq initial-scratch-message ";; Yeah man")
(blink-cursor-mode 0)

#+end_src

** Transparency

#+begin_src emacs-lisp

;;(add-to-list 'default-frame-alist '(alpha . (90 . 90)))
(add-to-list 'default-frame-alist '(alpha-background . 90))

#+end_src

** Code Block Colours 

#+begin_src emacs-lisp

(require 'color)
(set-face-attribute 'org-block nil :background
(color-darken-name
(face-attribute 'default :background) 3))

#+end_src

** Non Graphical Changes

#+begin_src emacs-lisp

(setq make-backup-files nil)
(setq auto-save-default nil)
(electric-pair-mode 1)
(setq-default use-short-answers t)

#+end_src

* Completion Frameworks

#+begin_src emacs-lisp

(require 'completions)

#+end_src

* Keybindings

#+begin_src emacs-lisp

(require 'keybindings)

#+end_src

* Vterm

#+begin_src emacs-lisp

(use-package vterm
:config
(setq shell-file-name "/usr/bin/fish"
vterm-max-scrollback 5000))

#+end_src

* Vterm Toggle

#+begin_src emacs-lisp

(use-package vterm-toggle
:after vterm
:config)
(setq vterm-toggle-fullscreen-p nil)
(add-to-list 'display-buffer-alist
             '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                (display-buffer-reuse-window display-buffer-at-bottom)
                ;;(display-buffer-reuse-window display-buffer-in-direction)
                ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                ;;(direction . bottom)
                ;;(dedicated . t) ;dedicated is supported in emacs27
                (reusable-frames . visible)
                (window-height . 0.3)))

#+end_src

* Web Mode

#+begin_src emacs-lisp

(use-package web-mode
:mode (("\\.html?\\'" . web-mode)
("\\.css\\'" . web-mode)
("\\.js\\'" . web-mode)
("\\.php\\'" . web-mode))
:config
(setq web-mode-markup-indent-offset 2
web-mode-css-indent-offset 2
web-mode-code-indent-offset 2
web-mode-enable-auto-pairing t
web-mode-enable-auto-closing t
web-mode-enable-auto-quoting t))

#+end_src

* File Readers

** PDF Tools

#+begin_src emacs-lisp

(use-package pdf-tools
:config
(pdf-loader-install))

#+end_src

** ePub

#+begin_src emacs-lisp

(use-package nov
:init
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))

#+end_src

* Elisp Functions

#+begin_src emacs-lisp

(require 'functions)
(autoload 'sudo-editor "functions")
(autoload 'sudo-current "functions")
(autoload 'toggle-font "functions")
(autoload 'reload-config "functions")
(autoload 'open-config "functions")

#+end_src
